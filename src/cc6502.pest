//    cc6502 - a subset of C compiler for the 6502 processor 
//    Copyright (C) 2023 Bruno STEUX 
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//    Contact info: bruno.steux@gmail.com

WHITESPACE   =  _{ " " | "\t" | NEWLINE }
COMMENT   = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE } 

program      =   { SOI ~ decl+ ~ EOI }


decl = { enclosed_decl 
       | var_decl
       | func_vec_decl
       | func_decl 
       | included_assembler
       }
enclosed_decl = { bank ~ "{" ~ decl+ ~ "}" }
var_decl = { var_type ~ global_id ~ ("," ~ global_id)* ~ ";"+ }
var_type = ${ ((var_const | superchip | ramchip | bank | aligned | display | frequency | reversed | scattered | holeydma | screencode | nopagecross) ~ WHITESPACE+ )* ~ (var_sign ~ WHITESPACE+)? ~ var_simple_type ~ WHITESPACE+ }
local_var_decl = { local_var_decl_const | local_var_decl_mut }
local_var_decl_const = { "const" ~ var_type ~ global_id ~ ("," ~ global_id)* ~ ";" }
local_var_decl_mut = { local_var_type ~ local_id ~ ("," ~ local_id)* ~ ";" }
local_var_type = ${ (var_sign ~ WHITESPACE+)? ~ var_simple_type ~ WHITESPACE+ }
var_const = { "const" }
superchip = { "superchip" }
ramchip = { "ramchip" }
display = { "display" }
frequency = { "frequency" }
aligned = { "aligned" ~ "(" ~ calc_expr ~ ")" }
var_sign = { "signed" | "unsigned" } 
var_simple_type = ${ "char" | ("short" ~ (WHITESPACE+ ~ "int")?) | "int" }
reversed = { "reversed" }
scattered = { "scattered" ~ "(" ~ calc_expr ~ "," ~ calc_expr ~ ")" }
holeydma = { "holeydma" }
screencode = { "screencode" }
nopagecross = { "nopagecross" }
id_name = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
global_id = { pointer* ~ var_const? ~ id_name ~ array_spec? ~ ("=" ~ var_def)? }
local_id = { pointer* ~ id_name ~ array_spec? ~ ("=" ~ expr_init_value)? }
array_spec = { "[" ~ calc_expr? ~ "]" }
var_def = { var_ptr | calc_expr | array_def | quoted_string }
array_def = { "{" ~ ((var_ptr | calc_expr | quoted_string) ~ ",")* ~ (var_ptr | calc_expr | quoted_string) ~ "}" }
var_ptr = { id_name ~ ptr_offset? ~ (ptr_hi | ptr_low)? }
ptr_hi = { ">>" ~ calc_expr }
ptr_low = { "&" ~ calc_expr }
ptr_offset = { "+" ~ int }
pointer = { "*" }

func_vec_decl = { "void" ~ "(*" ~ id_name ~ array_spec ~ ")()" ~ "=" ~ var_def }
func_decl = { inline? ~ bank? ~ ("void" | (var_sign? ~ var_simple_type?)) ~ interrupt? ~ id_name ~ "(" ~ ("void" | parameters)? ~ ")" ~ (";" | block) ~ ";"*}
parameters = { parameter ~ ("," ~ parameter)* }
parameter = { local_var_type ~ pointer* ~ id_name ~ array_spec? }
inline = { "inline" }
interrupt = { "interrupt" }
bank = ${ "bank" ~ bank_number }
bank_number = { ASCII_DIGIT }

included_assembler = ${ "=== ASSEMBLER BEGIN ===" ~ assembler_code ~ "==== ASSEMBLER END ====" }
assembler_code = ${(!"==== ASSEMBLER END ===="~ ANY)*} 

block = { "{" ~ statement* ~ "}" }
label = { id_name ~ ":" }
statement = { label? ~
    ( block
    | local_var_decl
    | do_while
    | while_do
    | for_loop
    | if_statement
    | switch_statement
    | break_statement
    | continue_statement
    | return_statement
    | asm_statement
    | strobe_statement
    | load_statement
    | store_statement
    | csleep_statement
    | goto_statement
    | expr ~ ";"
    | nothing ~ ";"
    ) }
do_while = { "do" ~ statement ~ "while" ~ "(" ~ expr ~ ")" ~ ";" }
while_do = { "while" ~ "(" ~ expr ~ ")"~ statement }
for_loop = { "for" ~ "(" ~ (expr | nothing) ~ ";" ~ (expr | nothing) ~ ";" ~ (expr | nothing) ~ ")" ~ statement }
if_statement = { "if" ~ "(" ~ expr ~ ")" ~ statement ~ ("else" ~ statement)* }
switch_statement = { "switch" ~ "(" ~ expr ~ ")" ~ "{" ~ cases ~ "}" }
break_statement = { "break" ~ ";" }
continue_statement = { "continue" ~ ";"}
return_statement = { "return" ~ (expr | nothing) ~ ";"}
asm_statement = { "asm" ~ "(" ~ quoted_string ~ ("," ~ calc_expr)? ~ ")" ~ ";"}
load_statement = { "load" ~ "(" ~ expr ~ ")" ~ ";"}
store_statement = { "store" ~ "(" ~ expr ~ ")" ~ ";"}
strobe_statement = { "strobe" ~ "(" ~ expr ~ ")" ~ ";"}
csleep_statement = { "csleep" ~ "(" ~ int ~ ")" ~ ";"}
goto_statement = { "goto" ~ id_name ~ ";"}

nothing = { "" }

cases = { ("case" ~ int ~ ":" ~ ((!"default" ~ statement)*))* ~ default_case? }
default_case = { "default" ~ ":" ~ statement* } 

expr_init_value = { prefix* ~ primary ~ postfix* ~ (infix_ex ~ prefix* ~ primary ~ postfix* )* }
    infix_ex    =  _{ pass | mass | mulass | divass | blsass | brsass | andass | xorass | orass |
                   mul | div | add | sub | bls | brs | lte | lt | gte | gt | eq | neq |
                   land | lor | and | xor | or | assign | ternary_cond1 | ternary_cond2
                   }

expr       =   { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix* )* }
    infix    =  _{ pass | mass | mulass | divass | blsass | brsass | andass | xorass | orass |
                   mul | div | add | sub | bls | brs | lte | lt | gte | gt | eq | neq |
                   land | lor | and | xor | or | assign | comma | ternary_cond1 | ternary_cond2
                   }
      mul    =   { "*" }  // Multiplication
      div    =   { "/" }  // Division
      add    =   { "+" }  // Addition
      sub    =   { "-" }  // Subtraction
      bls    =   { "<<" } // Bitwise left shift
      brs    =   { ">>" } // Bitwise right shift
      lt     =   { "<" }  // Less than
      lte    =   { "<=" } // Less than or equal
      gt     =   { ">" }  // Greater than
      gte    =   { ">=" } // Greater than or equal
      eq     =   { "==" } // Equal
      neq    =   { "!=" } // Different
      and    =   { "&" }  // And
      xor    =   { "^" }  // Xor
      or     =   { "|" }  // Or
      land   =   { "&&" } // Logical and
      lor    =   { "||" } // Logical or
      assign =   { "=" }  // Assignment
      pass   =   { "+=" } // Add assign
      mass   =   { "-=" } // Sub assign
      mulass =   { "*=" } // Multiply assign
      divass =   { "/=" } // Divide assign
      blsass =   { "<<=" }// Bitwise left shift assign
      brsass =   { ">>=" }// Bitwise right shift assign
      andass =   { "&=" } // And assign
      xorass =   { "^=" } // Or assign
      orass  =   { "|=" } // Or assign
      comma  =   { "," }  // Comma (discard left)
      ternary_cond1 = { "?" } // Ternary conditional (condition part)
      ternary_cond2 = { ":" } // Ternary conditional (alternatives part)
    prefix   =  _{ ppp | mmp | neg | addr | deref | not | bnot | sizeof }
      ppp    =   { "++" } // Increment
      mmp    =   { "--" } // Decrement
      neg    =   { "-" }  // Negation
      not    =   { "!" }  // Not
      bnot   =   { "~" }  // Bitwise not
      addr   =   { "&" }  // Address of
      deref  =   { "*" }  // Dereference
      sizeof =   { "sizeof" } // sizeof
    postfix  =  _{ pp | mm | call }
      pp     =   { "++" } // Increment
      mm     =   { "--" } // Decrement
      call   =   { "(" ~ expr? ~ ")" } // Function call
    primary  =  _{ int | primary_var_type | identifier | "(" ~ expr ~ ")" | quoted_string }

identifier  = { id_name ~ subscript? }
subscript   = { "[" ~ expr ~ "]" }
      
primary_var_type = { var_sign? ~ var_simple_type ~ !ASCII_ALPHANUMERIC ~ pointer* }
int = { hexadecimal | octal | decimal | quoted_character }
decimal     = @{ ("-")* ~ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
hexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
octal       = @{ "0" ~ ASCII_OCT_DIGIT+ }
escaped_character = @{ "\\" ~ ANY }
character   = @{ escaped_character | ANY }
quoted_character   = ${ "'" ~ character ~ "'" }
string      = @{ (!"\"" ~ character)* } 
// quoted_string      = ${ "\"" ~ string ~ "\""} // Pure C definition
quoted_string = { ("@" ~ decimal ~ "@")+ } // Actual definition after C preprocessing

calc_expr       =   { calc_prefix* ~ calc_primary ~ (calc_infix ~ calc_prefix* ~ calc_primary)* }
    calc_infix    =  _{ mul | div | add | sub | bls | brs | land | lor | and | xor | or | gte | gt | lte | lt | eq | neq | not | bnot | ternary_cond1 | ternary_cond2 }
    calc_prefix   =  _{ neg | not | bnot }
    calc_primary  =  _{ int | "(" ~ calc_expr ~ ")" }
